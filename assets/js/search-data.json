{
  
    
        "post0": {
            "title": "Report an issue",
            "content": "If you have any questions or concerns please leave them here, our team will be happy to respond to any issues you may have, thanks! . .",
            "url": "https://genechang1.github.io/TNGCFastpages/2022/10/23/Feedback.html",
            "relUrl": "/2022/10/23/Feedback.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Chess",
            "content": "How do I play chess?&lt;/i&gt; Report an Issue . . a b c d e f g h . 8 | | | | | | | | . 7 | | | | | | | | . 6 | | | | | | | | . 5 | | | | | | | | . 4 | | | | | | | | . 3 | | | | | | | | . 2 | | | | | | | | . 1 | | | | | | | | . .",
            "url": "https://genechang1.github.io/TNGCFastpages/project/2022/10/20/Chessboard.html",
            "relUrl": "/project/2022/10/20/Chessboard.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Most liked 16 16 Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions. haha: 16 boohoo: 2 Most jeered 6 11 If it wasn&#39;t for C, we’d all be programming in BASI and OBOL. haha: 14 boohoo: 6 Random joke 14 Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem. haha: 5 boohoo: 4 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . ModuleNotFoundError Traceback (most recent call last) c: Users Caleb .vscode ExampleRepo APCSP _notebooks 2022-10-17-PBL-webapi_tutorial.ipynb Cell 5 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W4sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; from flask import Blueprint, jsonify # jsonify creates an endpoint response object &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W4sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; from flask_restful import Api, Resource # used for REST API building &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W4sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import requests # used for testing ModuleNotFoundError: No module named &#39;flask&#39; . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . NameError Traceback (most recent call last) c: Users Caleb .vscode ExampleRepo APCSP _notebooks 2022-10-17-PBL-webapi_tutorial.ipynb Cell 7 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; responses = [] # responses list &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # Get the count of jokes on server -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; count_response = requests.get(url+&#34;count&#34;) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; count_json = count_response.json() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; count = count_json[&#39;count&#39;] NameError: name &#39;requests&#39; is not defined .",
            "url": "https://genechang1.github.io/TNGCFastpages/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Agile Methodology Weekly Plans and Notes",
            "content": "Roles . Scrum Master: Toby Leeder Dev Ops: Gene Chang Frontend: Nathan Capule Backend: Caleb Navarro . Week 9 . Initial Meeting, Monday . Toby: Work on logic for pieces, starting with rook then beginning pawn | Gene: Ensure Flask is running on AWS and stays running | Caleb: Backend (inconclusive, waiting on more lessons from Mortenson) | Nathan: Work on creating a chess board with html and creating the pieces on it | . Midweek Meeting, Wednesday . Toby: Assist Gene with Flask on AWS (more experienced and therefore able to help), work with Nathan on integration (more info in Nathan’s changes) | Gene: Create Group Fastpages | Caleb: Create Functional API on group Fastpages connected to our group flask (running on AWS) | Nathan: Work on integration, help Toby with integrating his code done in Javascript Jupyter Notebook into the ChessBoard | . Final Meeting, Friday . All: Create Video Displaying Our Roles | Gene: Add new requirements to nginx file on AWS (given on Slack) | Nathan: Combine videos into a single four minute video ready to be presented on Monday | . Weekly Completions . Video | Rook (almost finished), Pawn (not as close, but also almost finished) | HTML ChessBoard (not interactive) | . Week 10 . Initial Meeting, Monday . Toby: Continue work on logic for pieces, finish rook, keep working on pawn. Work with Nathan on Integration | Gene: Help Caleb with Backend | Caleb: Fix jokes api (still not working) | Nathan: Help Toby with chess logic a | . Midweek Meeting, Wednesday . Toby: Continue working on the same frontend aspects with Toby | Gene: Help Caleb with Beckend | Caleb: Start working on new idea for backend, multiplayer | Nathan: Continue working on the same frontend aspects with Toby | . Weekly Struggles . API ISSUES: The API wasn’t functional for a while and we didn’t know why. Then Gene and Caleb realized they were just running it wrong and thought they fixed it but it still isn’t working. | Making the ChessBoard interactive: Tried adding onclick events to the chessboard. At first it looked like it worked but the function ran too early and then it didn’t work at all. Now we have a new idea on how to do it after some googling that we will implement soon. | Issues with the logic for the pieces, it’s just hard to get it all working correctly. | . Final Meeting, Friday .",
            "url": "https://genechang1.github.io/TNGCFastpages/plans/2022/10/17/Agile-Stuff.html",
            "relUrl": "/plans/2022/10/17/Agile-Stuff.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Chess Logic W/JS",
            "content": "chessBoard = {}; lettersOnBoard = &quot;abcdefgh&quot;; function printBoard(){ for (j = 0; j &lt;= 7; j++){ letter = lettersOnBoard[j]; console.log(&quot;&quot;) for (i = 1; i &lt;= 8; i++){ var newKey = letter + i; process.stdout.write(chessBoard[newKey][0] + &quot; &quot;); } } } . &#39;abcdefgh&#39; . lettersOnBoard = &quot;abcdefgh&quot;; chessBoard = {}; for (j = 0; j &lt;= 7; j++){ letter = lettersOnBoard[j]; for (i = 1; i &lt;= 8; i++){ var newKey = letter + i; chessBoard[newKey] = [&quot;OO&quot;, undefined] } } // piece class, to be extended by other classes class piece{ constructor(_position, _color){ this.position = _position; this.color = _color } move(move, currentM){ let currentBoard = chessBoard[currentM]; if(this.getFreeMoves().includes(move)) { this.position = move; chessBoard[move] = currentBoard; chessBoard[currentM] = [&quot;OO&quot;, undefined]; } } } . [ &#39;OO&#39;, undefined ] . class rook extends piece{ constructor(_position, _color){ // super is the position constructor, uh basically does some super cool inheritence stuff or something. super(_position, _color); // automatically sets the spot on the board which is passed in to this rook this.id = &quot;R&quot; } //method to return all of the available moves that the piece can make. getTotalMoves(){ let currentPosition = this.position.split(&quot;&quot;); let moves = []; for (var i = 1; i &lt;= 8; i++){ var newMove = currentPosition[0] + i; moves[i - 1] = newMove; } for (var i = 1; i &lt;= 8; i++){ var newMove = lettersOnBoard[i - 1] + currentPosition[1]; moves.push(newMove); } let totalMoves = []; moves.forEach((c) =&gt; { if (c != this.position){ totalMoves.push(c); } }); return totalMoves; } //method to return all of the obstructed moves based on the total moves getObstructedMoves(){ let totalMoves = this.getTotalMoves(); let obstructedMoves = []; let blockedMoves = []; let index = -1 totalMoves.forEach((c) =&gt; { if (!obstructedMoves.includes(c)){ if (chessBoard[c][0] != &quot;OO&quot;){ obstructedMoves.push(c); index++ totalMoves.forEach((c) =&gt; { try{ if (obstructedMoves[index][1] &gt; this.position[1] &amp;&amp; c[1] &gt; obstructedMoves[index][1]){ blockedMoves.push(c) } else if (obstructedMoves[index][1] &lt; this.position[1] &amp;&amp; c[1] &lt; obstructedMoves[index][1]){ blockedMoves.push(c) } } catch{} try{ if (lettersOnBoard.indexOf(obstructedMoves[index][0]) &gt; lettersOnBoard.indexOf(this.position[0]) &amp;&amp; lettersOnBoard.indexOf(c[0]) &gt; lettersOnBoard.indexOf(obstructedMoves[index][0])){ blockedMoves.push(c) } if (lettersOnBoard.indexOf(obstructedMoves[index][0]) &lt; lettersOnBoard.indexOf(this.position[0]) &amp;&amp; lettersOnBoard.indexOf(c[0]) &lt; lettersOnBoard.indexOf(obstructedMoves[index][0])){ blockedMoves.push(c) } } catch{} }) } } }) blockedMoves.forEach((c) =&gt; {obstructedMoves.push(c);}) return obstructedMoves; } //method to return all of the moves which are not obstructed getFreeMoves(){ let totalMoves = this.getTotalMoves(); let obstructedMoves = this.getObstructedMoves(); totalMoves = totalMoves.filter( (c) =&gt; !obstructedMoves.includes(c) ); return totalMoves; } //method to return the pieces which can be captured. getAvailableCaptures(){ // defines new variables as other methods in this class which may be useful. let totalMoves = this.getTotalMoves(); let obstructedMoves = this.getObstructedMoves(); // defines arrays let sameRow = []; let sameColumn = []; let columnNums = []; let columnDifs = []; let negDifsColumn = []; let posDifsColumn = []; let rowLets = []; let rowNums = []; let rowDifs = []; let posDifsRow = []; let negDifsRow = []; let captures = []; let finalCaptures = []; // finds all of the moves which are in the same row or in the same column as the rook. obstructedMoves.forEach((c) =&gt; { if (this.position.split(&quot;&quot;)[0] == c.split(&quot;&quot;)[0]){ sameColumn.push(c); } else if (this.position.split(&quot;&quot;)[1] == c.split(&quot;&quot;)[1]){ sameRow.push(c); } }) //adds to a new array all of the numbers in the obstructed columns. Also converts it to an Integer sameColumn.forEach((c) =&gt; { columnNums.push(parseInt(c.split(&quot;&quot;)[1])); }) //elipses is a spread function, basically inputs each value in the array as it&#39;s own parameter. //this foreach finds the difference between the pieces in the same column and the rooks current position columnNums.forEach((c) =&gt; { columnDifs.push(c - parseInt(this.position.split(&quot;&quot;)[1])) }); //this foreach defines two new columnDifs.forEach((c) =&gt; { if (c &lt; 0) negDifsColumn.push(Math.abs(c)); else posDifsColumn.push(c); }) // finds the minimum positive number and the minimum negative number and converts them to an integer var posMinColumn = parseInt(Math.min(...posDifsColumn)); var negMinColumn = parseInt(Math.min(...negDifsColumn)); // works backwards to find the position on the board given the smallest differences sameColumn.forEach((c) =&gt; { if (parseInt(c.split(&quot;&quot;)[1]) == parseInt(this.position.split(&quot;&quot;)[1]) + posMinColumn || parseInt(c.split(&quot;&quot;)[1]) == parseInt(this.position.split(&quot;&quot;)[1]) - negMinColumn){ captures.push(c) } }) // basically does all of the same stuff but for the rows using the index of the lettersOnBoard array sameRow.forEach((c) =&gt; { rowLets.push(c.split(&quot;&quot;)[0]); }) rowLets.forEach((c) =&gt; { rowNums.push(lettersOnBoard.indexOf(c) + 1) }) rowNums.forEach((c) =&gt; { rowDifs.push(parseInt(c) - (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) + 1)) }) rowDifs.forEach((c) =&gt; { if (c &lt; 0) negDifsRow.push(Math.abs(c)); else posDifsRow.push(c); }) var posMinRow = parseInt(Math.min(...posDifsRow)); var negMinRow = parseInt(Math.min(...negDifsRow)) sameRow.forEach((c) =&gt; { if ((lettersOnBoard.indexOf(c.split(&quot;&quot;)[0]) + 1) == (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) + posMinRow + 1) || (lettersOnBoard.indexOf(c.split(&quot;&quot;)[0]) + 1) == (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) - negMinRow + 1)){ captures.push(c) } }) //checks if captures are the same color or not captures.forEach((c) =&gt; { if (chessBoard[c][0].split(&quot;&quot;)[0] != this.color){ finalCaptures.push(c); } }) return finalCaptures } getAvailableMoves(){ let freeMoves = this.getFreeMoves() let captures = this.getAvailableCaptures() captures.forEach((c) =&gt; { freeMoves.push(c); }) return freeMoves; } } let rook1 = new rook(&quot;d5&quot;, &quot;b&quot;); chessBoard[rook1.position] = [rook1.color + rook1.id, rook1] let rook2 = new rook(&quot;e5&quot;, &quot;w&quot;) chessBoard[rook2.position] = [rook2.color + rook2.id, rook2] let rook3 = new rook(&quot;f5&quot;, &quot;w&quot;) chessBoard[rook3.position] = [rook3.color + rook3.id, rook3] printBoard() console.log(&quot;&quot;) console.log(rook1.getAvailableMoves()) //console.log(rook1.getFreeMoves()) . OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO bR OO OO OO OO OO OO OO wR OO OO OO OO OO OO OO wR OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO [ &#39;d1&#39;, &#39;d2&#39;, &#39;d3&#39;, &#39;d4&#39;, &#39;d6&#39;, &#39;d7&#39;, &#39;d8&#39;, &#39;a5&#39;, &#39;b5&#39;, &#39;c5&#39;, &#39;e5&#39; ] . class pawn extends piece{ constructor(_position, _color){ // super is the position constructor, uh basically does some super cool inheritence stuff or something. super(_position, _color); // automatically sets the spot on the board which is passed in to this pawn using the parent method if (_color == &quot;w&quot;){this.direction = 1} else if (_color == &quot;b&quot;) {this.direction = -1} this.hasMoved = 0; this.id = &quot;P&quot;; } move(move, currentM){ super.move(move, currentM) this.hasMoved = 1 } getTotalMoves(){ let moves = []; let currentPosition = this.position.split(&quot;&quot;); if(this.hasMoved == 0){ moves.push(currentPosition[0] + (parseInt(currentPosition[1]) + (1 * this.direction))) moves.push(currentPosition[0] + (parseInt(currentPosition[1]) + (2 * this.direction))) } else{ moves.push(currentPosition[0] + (parseInt(currentPosition[1]) + (1 * this.direction))) } return moves; } getFreeMoves(){ let moves = this.getTotalMoves(); let freeMoves = []; if (chessBoard[moves[0]][0] == &quot;OO&quot;){ freeMoves.push(moves[0]); try{ if (chessBoard[moves[1]][0] == &quot;OO&quot;){freeMoves.push(moves[1]);} }catch{} } return freeMoves; } getAvailableCaptures(){ let captures = []; let currentPosition = this.position.split(&quot;&quot;); let possibleLets = [ lettersOnBoard[lettersOnBoard.indexOf(currentPosition[0]) - 1], lettersOnBoard[lettersOnBoard.indexOf(currentPosition[0]) + 1] ]; possibleLets = possibleLets.filter(c =&gt; c != undefined); possibleLets.forEach((c) =&gt; { let a = parseInt(currentPosition[1]) + (1 * this.direction) let check = c + a if (chessBoard[check][0][0] != this.color &amp;&amp; chessBoard[check][0] != &quot;OO&quot;){ captures.push(check); } }) console.log(captures); } } let pawn1 = new pawn(&quot;c5&quot;, &quot;b&quot;) // for (var i = 0; i &lt; 8; i++){ // let i = new pawn (&quot;c&quot; + toString(i), b) // } //console.log(chessBoard[]) . class king extends piece{ constructor(_position, _color){ // super is the position constructor, uh basically does some super cool inheritence stuff or something. super(_position, _color); // automatically sets the spot on the board which is passed in to this rook } //method to return all of the available moves that the piece can make. getTotalMoves(){ let currentPosition = this.position.split(&quot;&quot;); let moves = []; let aboveNum = parseInt(currentPosition[1]) + 1 let currentLetNum = lettersOnBoard.indexOf(currentPosition[0]) for (var i = -1; i &lt;= 1; i++){ moves.push(lettersOnBoard[currentLetNum + i] + aboveNum); } let belowNum = parseInt(currentPosition[1]) - 1 for (var i = -1; i &lt;= 1; i++){ moves.push(lettersOnBoard[currentLetNum + i] + belowNum); } let sameNum = parseInt(currentPosition[1]) for (var i = -1; i &lt;= 1;i++){ if (i != 0){ moves.push(lettersOnBoard[currentLetNum + i] + sameNum); } } return moves; } //method to return all of the obstructed moves based on the total moves getObstructedMoves(){ let totalMoves = this.getTotalMoves(); let obstructedMoves = []; for (var i = 0; i &lt; totalMoves.length; i++){ if (chessBoard[totalMoves[i]][0] != &quot;OO&quot;){ obstructedMoves.push(totalMoves[i]); } } return obstructedMoves; } //method to return all of the moves which are not obstructed getFreeMoves(){ let totalMoves = this.getTotalMoves(); let obstructedMoves = this.getObstructedMoves(); totalMoves.forEach((c) =&gt; { //console.log(c); for (var i = 0; i &lt; obstructedMoves.length; i ++){ if (c == obstructedMoves[i]){ totalMoves.splice(totalMoves.indexOf(c), 1); } } }) return totalMoves; } //method to return the pieces which can be captured. getAvailableCaptures(){ // defines new variables as other methods in this class which may be useful. let totalMoves = this.getTotalMoves(); let obstructedMoves = this.getObstructedMoves(); // defines arrays let sameRow = []; let sameColumn = []; let columnNums = []; let columnDifs = []; let negDifsColumn = []; let posDifsColumn = []; let rowLets = []; let rowNums = []; let rowDifs = []; let posDifsRow = []; let negDifsRow = []; let captures = []; let finalCaptures = []; // finds all of the moves which are in the same row or in the same column as the rook. obstructedMoves.forEach((c) =&gt; { if (this.position.split(&quot;&quot;)[0] == c.split(&quot;&quot;)[0]){ sameColumn.push(c); } else if (this.position.split(&quot;&quot;)[1] == c.split(&quot;&quot;)[1]){ sameRow.push(c); } }) //adds to a new array all of the numbers in the obstructed columns. Also converts it to an Integer sameColumn.forEach((c) =&gt; { columnNums.push(parseInt(c.split(&quot;&quot;)[1])); }) //elipses is a spread function, basically inputs each value in the array as it&#39;s own parameter. //this foreach finds the difference between the pieces in the same column and the rooks current position columnNums.forEach((c) =&gt; {columnDifs.push(c - parseInt(this.position.split(&quot;&quot;)[1]))}); //this foreach defines two new columnDifs.forEach((c) =&gt; {if (c &lt; 0) negDifsColumn.push(Math.abs(c)); else posDifsColumn.push(c);}) // finds the minimum positive number and the minimum negative number and converts them to an integer var posMinColumn = parseInt(Math.min(...posDifsColumn)); var negMinColumn = parseInt(Math.min(...negDifsColumn)); // works backwards to find the position on the board given the smallest differences sameColumn.forEach((c) =&gt; {if (parseInt(c.split(&quot;&quot;)[1]) == parseInt(this.position.split(&quot;&quot;)[1]) + posMinColumn || parseInt(c.split(&quot;&quot;)[1]) == parseInt(this.position.split(&quot;&quot;)[1]) - negMinColumn){captures.push(c)}}) // basically does all of the same stuff but for the rows using the index of the lettersOnBoard array sameRow.forEach((c) =&gt; {rowLets.push(c.split(&quot;&quot;)[0]);}) rowLets.forEach((c) =&gt; {rowNums.push(lettersOnBoard.indexOf(c) + 1)}) rowNums.forEach((c) =&gt; {rowDifs.push(parseInt(c) - (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) + 1))}) rowDifs.forEach((c) =&gt; {if (c &lt; 0) negDifsRow.push(Math.abs(c)); else posDifsRow.push(c);}) var posMinRow = parseInt(Math.min(...posDifsRow)); var negMinRow = parseInt(Math.min(...negDifsRow)) sameRow.forEach((c) =&gt; {if ((lettersOnBoard.indexOf(c.split(&quot;&quot;)[0]) + 1) == (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) + posMinRow + 1) || (lettersOnBoard.indexOf(c.split(&quot;&quot;)[0]) + 1) == (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) - negMinRow + 1)){captures.push(c)}}) //checks if captures are the same color or not captures.forEach((c) =&gt; { if (chessBoard[c].split(&quot;&quot;)[0] != this.color){ finalCaptures.push(c); } }) return finalCaptures } } let king1 = new king(&quot;d5&quot;, &quot;b&quot;); console.log(king1.getObstructedMoves()) . [ &#39;e5&#39; ] . let rookb1 = new rook(&quot;a8&quot;, &quot;b&quot;); setBoard(rookb1) let rookb2 = new rook(&quot;h8&quot;, &quot;b&quot;); setBoard(rookb2) let rookw1 = new rook(&quot;a1&quot;, &quot;w&quot;); setBoard(rookw1) let rookw2 = new rook(&quot;h1&quot;, &quot;w&quot;); setBoard(rookw2) let pawnw1 = new pawn(&quot;a2&quot;, &quot;w&quot;) setBoard(pawnw1) let pawnw2 = new pawn(&quot;b2&quot;, &quot;w&quot;) setBoard(pawnw2) let pawnw3 = new pawn(&quot;c2&quot;, &quot;w&quot;) setBoard(pawnw3) let pawnw4 = new pawn(&quot;d2&quot;, &quot;w&quot;) setBoard(pawnw4) let pawnw5 = new pawn(&quot;e2&quot;, &quot;w&quot;) setBoard(pawnw5) let pawnw6 = new pawn(&quot;f2&quot;, &quot;w&quot;) setBoard(pawnw6) let pawnw7 = new pawn(&quot;g2&quot;, &quot;w&quot;) setBoard(pawnw7) let pawnw8 = new pawn(&quot;h2&quot;, &quot;w&quot;) setBoard(pawnw8) // printBoard() // movePiece(&quot;g2&quot;, &quot;g4&quot;); // movePiece(&quot;a1&quot;, &quot;g1&quot;); // console.log(&quot;&quot;); // movePiece(&quot;g4&quot;, &quot;g5&quot;); // movePiece(&quot;g5&quot;, &quot;g6&quot;); // movePiece(&quot;g6&quot;, &quot;g7&quot;); // printMoves(&quot;g7&quot;) // movePiece(&quot;g7&quot;, &quot;h8&quot;); // printBoard(); console.log(chessBoard[&quot;a1&quot;]); console.log(chessBoard[&quot;a1&quot;][1].getFreeMoves()); function setBoard(obj){ chessBoard[obj.position] = [obj.color + obj.id, obj] } function movePiece(currentM, newM){ chessBoard[currentM][1].move(newM, currentM) } function printMoves(current){ console.log(chessBoard[current][1].getAvailableMoves()) } . [ &#39;wR&#39;, rook { position: &#39;a1&#39;, color: &#39;w&#39;, id: &#39;R&#39; } ] [ &#39;b1&#39;, &#39;c1&#39;, &#39;d1&#39;, &#39;e1&#39;, &#39;f1&#39;, &#39;g1&#39; ] . .",
            "url": "https://genechang1.github.io/TNGCFastpages/week_8/2022/10/11/Chess_Logic.html",
            "relUrl": "/week_8/2022/10/11/Chess_Logic.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fetch of Backend Jokes",
            "content": "Joke HaHa Boohoo .",
            "url": "https://genechang1.github.io/TNGCFastpages/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://genechang1.github.io/TNGCFastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://genechang1.github.io/TNGCFastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://genechang1.github.io/TNGCFastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://genechang1.github.io/TNGCFastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}